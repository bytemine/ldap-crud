package main

// attributetypes are generated by the parser from the schema source
type attributetype struct {
	Name               []string
	Desc               string
	Obsolete           bool
	Sup                string
	Equality           string
	Ordering           string
	Substr             string
	Syntax             string
	SingleValue        bool
	Collective         bool
	NoUserModification bool
}

// create a new attributetype initialized with values from the map m
func newAttributetype(m map[int]interface{}) *attributetype {
	a := attributetype{}
	for k, v := range m {
		switch k {
		case NAME:
			a.Name = v.([]string)
		case DESC:
			a.Desc = v.(string)
		case OBSOLETE:
			a.Obsolete = v.(bool)
		case SUP:
			a.Sup = v.(string)
		case EQUALITY:
			a.Equality = v.(string)
		case ORDERING:
			a.Ordering = v.(string)
		case SUBSTR:
			a.Substr = v.(string)
		case SYNTAX:
			a.Syntax = v.(string)
		case SINGLEVALUE:
			a.SingleValue = v.(bool)
		case COLLECTIVE:
			a.Collective = v.(bool)
		case NOUSERMODIFICATION:
			a.NoUserModification = v.(bool)
		}
	}
	return &a
}
